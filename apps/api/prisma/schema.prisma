generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        String   @id @db.VarChar(255)
  userId    String   @db.VarChar(255)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("admins")
}

model AuthProvider {
  id           String           @id @db.VarChar(255)
  userId       String           @db.VarChar(255)
  providerType AuthProviderType @map("provider_type")
  createdAt    DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)
  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("auth_providers")
}

model Credential {
  id           String   @id @default(uuid()) @db.VarChar(255)
  email        String   @unique @db.VarChar(255)
  passwordHash String   @map("password_hash") @db.VarChar(255)
  userId       String   @db.VarChar(255)
  user         User     @relation(fields: [userId], references: [id])
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)

  @@index([userId], name: "credentials_userId_idx")
  @@map("credentials")
}

model User {
  id           String         @id @db.VarChar(255)
  name         String?        @db.VarChar(100)
  image        String?
  createdAt    DateTime       @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime       @default(now()) @map("updated_at") @db.Timestamptz(6)
  admin        Admin[]
  authProvider AuthProvider[]
  credential   Credential[]
  Email        Email[]

  @@map("users")
}

enum AuthProviderType {
  GOOGLE
  CREDENTIALS

  @@map("auth_provider_type")
}

enum EmailStatus {
  SENT
  FAILED
  PENDING

  @@map("email_status")
}

model Email {
  id      String      @id @db.VarChar(255)
  userId  String      @db.VarChar(255)
  from    String      @db.VarChar(500)
  to      String      @db.Text
  subject String      @db.VarChar(255)
  body    String      @db.Text
  status  EmailStatus @map("status")

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @default(now()) @map("updated_at") @db.Timestamptz(6)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("emails")
}
