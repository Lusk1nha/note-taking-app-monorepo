generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id        String   @id @db.VarChar(255)
  userId    String   @db.VarChar(255)
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("admins")
}

model AuthProvider {
  id           String           @id @db.VarChar(255)
  userId       String           @db.VarChar(255)
  providerType AuthProviderType @map("provider_type")
  createdAt    DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)
  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("auth_providers")
}

model Credential {
  id           String   @id @default(uuid()) @db.VarChar(255)
  email        String   @unique @db.VarChar(255)
  passwordHash String   @map("password_hash") @db.VarChar(255)
  userId       String   @db.VarChar(255)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@index([userId], name: "credentials_userId_idx")
  @@map("credentials")
}

model User {
  id           String         @id @db.VarChar(255)
  name         String?        @db.VarChar(100)
  image        String?
  createdAt    DateTime       @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime       @updatedAt @map("updated_at") @db.Timestamptz(6)
  admin        Admin[]
  authProvider AuthProvider[]
  credential   Credential[]
  Tags         Tag[]
  Note         Note[]
  NoteTag      NoteTag[]

  @@map("users")
}

enum AuthProviderType {
  GOOGLE
  CREDENTIALS

  @@map("auth_provider_type")
}

model Tag {
  id   String @id @db.VarChar(255)
  name String @db.VarChar(255)

  userId String @db.VarChar(255)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  NoteTag NoteTag[]

  @@unique([name, userId], name: "tag_name_userId_unique")
  @@map("tags")
}

model Note {
  id      String @id @db.VarChar(255)
  title   String @db.VarChar(255)
  content String @db.Text

  userId String @db.VarChar(255)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  NoteTag NoteTag[]

  @@unique([title, userId], name: "note_title_userId_unique")
  @@index([userId], name: "notes_userId_idx")
  @@map("notes")
}

model NoteTag {
  noteId String @db.VarChar(255)
  tagId  String @db.VarChar(255)
  userId String @db.VarChar(255)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  note Note @relation(fields: [noteId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)

  @@id([noteId, tagId])
  @@index([noteId], name: "note_tag_noteId_idx")
  @@index([tagId], name: "note_tag_tagId_idx")
  @@map("note_tags")
}
